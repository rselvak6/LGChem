%% OCV-R-RC
%   AC formulation for a OCV-R-RC equivalent circuit model of a 2300 mAh
%   Li-ion A123 battery with using a fixed control
%   Raja Selvakumar
%   08/04/2018
%   All parameter values taken from Perez, H.E; Hu, X; Dey, S; Moura, S.J. 2015
%% ECM Hyperparameters
t_0 = 0;
t_max = 300;
dt = 1;
C_batt = 2.3*3600;
R_1 = 0.01;
C_1 = 2500;
I_max = 46;
z_target = 0.75;
N = (t_max-t_0)/dt; % total time scale

%--Actor/critic parameters
iter = 500;
wc1_0 = 0.1;
wc2_0 = 0.1;
eta_a = 7e-5;
eta_c = 9e-5;
tol = 1e-6;
N_ah = 3; % 1 hidden layer, 3 neurons
N_ch = 3; 
m = 2; % 2 states [SOC, V1]
n = 1; % 1 output [I]
i_max = iter;

% Matrices
x_star = nan*ones(m,N);
u_star = nan*ones(n,N-1);
r_star = nan*ones(N,2);
save AC_params.mat;
%% Load data
clc; clear;
load AC_params.mat;
load OCVRRC.mat;
fs = 15;
%% Initialize state and control
x = [0.25; 0]; % initial values for states
u = a; % optimal current (from DP solution)

%% Solve ADP
clc;
tic;

for k = 1:N-1 %time
    if mod(k,10)==0
        fprintf(1,'Computing actor-critic algorithm at %3.0f sec\n',k*dt);
    end
    % Create reward function expression
    target = [z_target x(2) u(k)]'; % reward: get to SOC target
    r_k = [x; u(k)]-target;
    J_prev = r_star(;
    w_c1 = wc1_0*ones(N_ch,m+n);
    w_c2 = wc2_0*ones(1,N_ch);
    J_mat = nan*ones(i_max,1);
    e_c = 1E5; % dummy large number
    
    while e_c > tol
        if iter == 0
            e_c = min(J_mat);
            iter = i_max-find(J_mat==e_c);
            break
        end
        cr = Critic(iter,w_c1,w_c2,eta_c);
        cr.q_cs = applywc1(cr,x,u(k));
        J_hat = predictJ(cr);
        [e_c,r] = cerror(cr,J_hat,J_prev,x,u(k),target);
        [w_c1,w_c2] = updateWc(cr,e_c,x,u(k));
        iter = iter-1;
        J_prev = J_hat;
        J_mat(i_max-iter+1) = e_c;
    end
    
    % Save optimal values
    x_star(:,k) = x;
    u_star(:,k) = u(k);
    
    % Save error and number of iterations needed to converge
    r_star(k,1) = r'*r;
    r_star(k,2) = i_max-iter;
    
    x = x.*[1;1-dt/(R_1*C_1)] + u(k)*dt*[1/C_batt;1/C_1]; % state update
    iter = i_max; %reset iteration count
end

solveTime = toc;
fprintf(1,'ADP Solver Time: %2.0f min %2.0f sec \n',floor(solveTime/60),mod(solveTime,60));
%% Plot Results
clc;
figure; clf;
t_1 = linspace(t_0,t_max,length(b)); %DP
t = linspace(t_0,t_max,N);

% Current
subplot(3,2,[1 2]);
plot(t(1:N-1), u_star,'k','LineWidth',0.5,'DisplayName','z_{max}=0.8');
hold on
plot(t_1(1:length(a)), a,'b','LineWidth',0.5,'DisplayName','z_{max}=0.75');
hold off
title('Current vs. time','FontSize',fs);
ylabel('\it{I^{*}} \rm{[A]}','FontSize',13);
lgd = legend('show');
lgd.FontSize = 10;
lgd.Location = 'East';

% SOC
subplot(3,2,[3 4]);
plot(t, x_star(1,k),'k','LineWidth',0.5,'DisplayName','z_0=0.5');
hold on
plot(t_1, b,'b','LineWidth',0.5,'DisplayName','z_0=0.25');
hold off
title('SOC vs. time','FontSize',fs);
ylabel('\it{z}','FontSize',13);

% capacitor voltage
subplot(3,2,[5 6]);
plot(t, x_star(2,k),'k','LineWidth',0.5);
hold on
plot(t_1, c,'b','LineWidth',0.5);
hold off
title('Capacitor voltage vs. time','FontSize',fs);
xlabel('\it{t} \rm{[s]}','FontSize',13);
ylabel('\it{V_{1}} \rm{[V]}','FontSize',13);
%% Save data
a = I_sim;
b = SOC_sim;
c = V1_sim;
d = V_sim;
e = Voc_sim;
save OCVRRC.mat a b c d e